return {
  "mfussenegger/nvim-dap",
  dependencies = {
    {
      "jbyuki/one-small-step-for-vimkind",
      config = function()
        local dap = require("dap")

        -- Adaptador para Lua (já configurado)
        dap.adapters.nlua = function(callback, conf)
          local adapter = {
            type = "server",
            host = conf.host or "127.0.0.1",
            port = conf.port or 8086,
          }
          if conf.start_neovim then
            local dap_run = dap.run
            dap.run = function(c)
              adapter.port = c.port
              adapter.host = c.host
            end
            require("osv").run_this()
            dap.run = dap_run
          end
          callback(adapter)
        end

        dap.configurations.lua = {
          {
            type = "nlua",
            request = "attach",
            name = "Run this file",
            start_neovim = {},
          },
          {
            type = "nlua",
            request = "attach",
            name = "Attach to running Neovim instance (port = 8086)",
            port = 8086,
          },
        }
      end,
    },
    {
      "mxsdev/nvim-dap-vscode-js",
      dependencies = { "mfussenegger/nvim-dap" },
      config = function()
        local dap = require("dap")
        require("dap-vscode-js").setup({
          debugger_path = vim.fn.stdpath("data") .. "/lazy/vscode-js-debug",
          adapters = { "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" },
        })

        -- Configurações para JS/TS genérico
        for _, language in ipairs({ "typescript", "javascript" }) do
          dap.configurations[language] = {
            {
              type = "pwa-node",
              request = "launch",
              name = "Launch file",
              program = "${file}",
              cwd = "${workspaceFolder}",
            },
            {
              type = "pwa-node",
              request = "attach",
              name = "Attach to process",
              processId = require("dap.utils").pick_process,
              cwd = "${workspaceFolder}",
            },
            -- ⚡ Configuração específica para NestJS (TS com ts-node)
            {
              type = "pwa-node",
              request = "launch",
              name = "Debug NestJS (ts-node)",
              runtimeExecutable = "node",
              runtimeArgs = { "-r", "ts-node/register" },
              args = { "${workspaceFolder}/src/main.ts" },
              cwd = "${workspaceFolder}",
              sourceMaps = true,
              protocol = "inspector",
              console = "integratedTerminal",
              skipFiles = { "<node_internals>/**" },
            },
            -- ⚡ Configuração para NestJS já compilado (dist/)
            {
              type = "pwa-node",
              request = "launch",
              name = "Debug NestJS (build/dist)",
              program = "${workspaceFolder}/dist/main.js",
              cwd = "${workspaceFolder}",
              sourceMaps = true,
              protocol = "inspector",
              console = "integratedTerminal",
              skipFiles = { "<node_internals>/**" },
            },
          }
        end
      end,
    },
    {
      "microsoft/vscode-js-debug",
      version = "1.x",
      build = "npm install --legacy-peer-deps && npx gulp vsDebugServerBundle && mv dist out",
    },
  },
}
